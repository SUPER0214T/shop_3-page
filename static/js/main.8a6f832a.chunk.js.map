{"version":3,"sources":["components/Cart.js","components/Detail.js","components/Jumbotron.js","components/Proudct.js","components/MainProduct.js","components/Nav.js","components/OrderList.js","App.js","reportWebVitals.js","Data.js","reducer.js","index.js"],"names":["Modal","props","history","useHistory","dispatch","useDispatch","useEffect","localStorage","getItem","copy","state","setItem","JSON","stringify","localData","localData2","parse","push","type","className","payment","toLocaleString","onClick","Cart","useSelector","cartReducer","useState","setpayment","modalState","setModalState","pay","map","el","i","price","payBtn","document","querySelector","classList","add","remove","title","quan","payload","id","alert","Detail","useParams","orderQuan","setOrderQuan","reducer","productPrice","setProductPrice","priceState","setPriceState","orederQuanEvent","changeLocalData","unshift","Set","priceCalculate","purchase","Date","purchaseYear","getFullYear","purchaseMonth","getMonth","purchaseDate","getDate","purchaseData","src","Number","alt","content","placeholder","min","max","date","goBack","Jumbotron","Product","MainProduct","Nav","NoneOrder","OrderContianer","OrderList","localModal","setLocalModal","localCopy","setLocalCopy","localState","App","getCount","setGetCount","path","exact","axios","get","then","result","data","catch","error","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Data","initialData","cartData","store","createStore","combineReducers","action","idFound","findIndex","orderPrice","splice","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8a6f832a.chunk.js","sourcesContent":["/* eslint-disable */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport '../styles/cart.scss'\r\n\r\n\r\nfunction Cart() {\r\n  const state = useSelector(state => state.cartReducer);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  // list의 el.quan 옆에 들어갔던 버튼이다. 나중에 cart에서도 수량 변경 하고, 가격도 수정할 수 있도록 만들려면 이거 쓰면 된다. <button onClick={() => { dispatch({type: \"quanUp\", payload: el.id}) }}>+</button><button onClick={() => { dispatch({type: \"quanDown\", payload: el.id }) }}>-</button>\r\n  // 원래 만들어 놓은 데이터를 불러와서 완전히 새로운 데이터 에 quan을 추가해서  다시 만든 후 cart에 집어 넣는다. quan은 1개가 기본이고,  Detail 칸에서 수량 정할 수 있는 input 만들어서 onChange로 받는다.\r\n\r\n  const [payment, setpayment] = useState(0);\r\n  const [modalState, setModalState] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let pay = 0;\r\n    state.map((el, i) => { \r\n      pay += el.price\r\n     })\r\n    setpayment(pay)\r\n  }, [state])\r\n\r\n  // 결제 가격이 0원이면 결제하기 버튼 클릭 못하게\r\n  useEffect(() => {\r\n    const payBtn = document.querySelector('.pay');\r\n    if(payment === 0) {\r\n      payBtn.classList.add('zeroPay')\r\n    } else {\r\n      payBtn.classList.remove('zeroPay')\r\n    }\r\n  }, [payment])\r\n\r\n  // 결제 가격이 0원일 때 -> 결제하기 버튼을 클릭하면 위에 알림창 뜨도록 \"장바구니에 담긴 물건이 없습니다.\"\r\n  // 결제 가격이 0원이 아닐 때 -> 클릭하면 \"결제 완료\"라고 모달창 뜸 -> 그리고 모달창에는 밑에 버튼 두 개 있음 -> 구매 목록, 쇼핑 더 하기\r\n  // 클릭하면 2초정도 결제중--- 애니메이션 뜨고 -> 2초지난 후에 결제 완료! 라고 뜨고 밑에 버튼 두개\r\n  function payEvent() {\r\n    if(payment > 0 ) {\r\n      setModalState(true)  // 메뉴 가기, 주문 목록 가기 버튼 누르면 이 paymentState는 false로 바뀌어야 한다.\r\n    } else {\r\n      alert(\"장바구니에 담긴 물건이 없습니다.\")\r\n      history.push(\"/\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart-container\">\r\n      <ul className=\"cart-list-container\">\r\n        <li className=\"cart-list\">#</li>\r\n        <li className=\"cart-list\">제품명</li>\r\n        <li className=\"cart-list\">가격</li>\r\n        <li className=\"cart-list\">수량</li>\r\n        <li className=\"cart-list\">삭제</li>\r\n      </ul>\r\n      {\r\n        state.map((el, i) => {\r\n          return (\r\n            <ul key={i} className=\"cart-list-container\">\r\n              <li className=\"cart-list\">{i + 1}</li>\r\n              <li className=\"cart-list\">{ el.title }</li>\r\n              <li className=\"cart-list\">{ el.price.toLocaleString('ko-KR') }</li>\r\n              <li className=\"cart-list\">{ el.quan }</li>\r\n              <li className=\"cart-list\"><button onClick={() => { dispatch({type: \"removeItem\", payload: el.id}) }}>x</button></li>\r\n            </ul>\r\n          )\r\n        })\r\n      }\r\n\r\n      <button className=\"goHome\" onClick={() => { history.push(\"/\") }}>더 고르기</button>\r\n      <div className=\"payment-container\">\r\n        <h3 className=\"payment\">결제 가격: {payment.toLocaleString('ko-KR')}원</h3>\r\n        <button className=\"pay\" onClick={() => { payEvent() }}>결제하기</button>\r\n      </div>\r\n\r\n      {\r\n        modalState\r\n        ? <Modal payment={payment} state={state} />\r\n        : null\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n// 이 모달 창이 닫히고 난 후에 Cart에는 아무것도 없게 만들고, Cart에 있던 목록들은 /orderList 경로로 \"배송중\"을 띄우자\r\nfunction Modal(props) {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  // 1. useEffect 안의 return 부분의 콜백 안에 localStorage로 데이터를 보내는 기능 구현\r\n  // 2. 결제완료 모달을 나간 후에 1번을 실행하고, cartReducer의 데이터를 빈 배열로 초기화\r\n\r\n  // localStorage에 orderList 데이터가 있으면 객체를 추가, 데이터가 없으면 배열 객체 데이터 추가\r\n  // 아래의 useEffect는 결제완료 모달을 나갔을 때 localStorage로 cart의 목록들을 전달해준다.\r\n  useEffect(() => {\r\n    return () => {\r\n      if(localStorage.getItem(\"orderList\") === null) {  // orderList 없을 때\r\n        let copy = [...props.state];\r\n        localStorage.setItem(\"orderList\", JSON.stringify(copy))\r\n      } else {\r\n        let copy = [...props.state];\r\n        let localData = localStorage.getItem(\"orderList\");\r\n        let localData2 = JSON.parse(localData);\r\n        localData2.push(...copy)\r\n        localStorage.setItem(\"orderList\", JSON.stringify(localData2))\r\n      }\r\n      dispatch({type: \"paymentSuccess\"})\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"grey\">\r\n      <div className=\"payment-modal-container\">  \r\n        <h2>결제가 완료되었습니다.</h2>\r\n        <div className=\"icon\">\r\n          <h2>결제된 금액: { props.payment.toLocaleString('ko-KR') }원</h2>\r\n          <h3>구매해주셔서 감사합니다!</h3>\r\n        </div>\r\n        <div className=\"payment-modal-btn-container\">\r\n          <button className=\"modal-btn\" onClick={() => { history.push(\"/\") }}>메인 화면</button>\r\n          <button className=\"modal-btn\" onClick={() => { history.push(\"/order-list\") }}>주문 목록</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cart;","/* eslint-disable */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport '../styles/detail.scss'\r\n\r\nfunction Detail() {\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const state = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  \r\n  const [orderQuan, setOrderQuan] =  useState(1);\r\n  const [productPrice, setProductPrice] = useState(state.reducer[id].price);\r\n  const [priceState, setPriceState] = useState(orderQuan)\r\n\r\n  function orederQuanEvent(type) {  // type = up, down\r\n    if(type === \"up\" && orderQuan < 10) {\r\n      setOrderQuan(orderQuan + 1)\r\n    } else if(type === \"down\" && orderQuan > 1) {\r\n      setOrderQuan(orderQuan - 1)\r\n    }\r\n  }\r\n\r\n  function order() {\r\n    dispatch({type: \"order\", payload: { id: id, title: state.reducer[id].title, price: productPrice, quan: orderQuan, date: purchaseData }})\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(localStorage.getItem('visited') === null) {\r\n      localStorage.setItem(\"visited\", JSON.stringify([]))\r\n    } else {\r\n      let localData = JSON.parse(localStorage.getItem(\"visited\"));\r\n      let changeLocalData = [...localData]\r\n      changeLocalData.unshift(id)\r\n      changeLocalData = new Set(changeLocalData)\r\n      changeLocalData = [...changeLocalData]\r\n      localStorage.setItem(\"visited\", JSON.stringify(changeLocalData))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // orderQuan과 productPrice를 곱해서 수량 증가할 때마다 가격칸에 가격 업데이트 되도록\r\n    const priceCalculate = orderQuan * state.reducer[id].price;\r\n    setProductPrice(priceCalculate);\r\n  }, [orderQuan])\r\n\r\n  // 금액에 컴마 붙이는 기능 만들기\r\n  useEffect(() => {\r\n    setPriceState(productPrice.toLocaleString('ko-KR'))\r\n  }, [productPrice])\r\n\r\n  // 주문하기 누르면 구매일도 같이 들어가야 함\r\n  const purchase = new Date();\r\n  const purchaseYear = purchase.getFullYear();  // 2021년\r\n  const purchaseMonth = purchase.getMonth();  // + 1 해야 현재 month 됨\r\n  const purchaseDate = purchase.getDate();  // 4일\r\n\r\n  const purchaseData = `${purchaseYear}.${purchaseMonth + 1}.${purchaseDate}`\r\n\r\n\r\n  return (\r\n    <div className=\"detail-container\">\r\n      <div className=\"detail-product-img\">\r\n        <img src={`https://codingapple1.github.io/shop/shoes${Number(id) + 1}.jpg`} alt=\"product img\"/>\r\n      </div>\r\n      <div className=\"description-container\">\r\n        <div>\r\n          <h1 className=\"detail-description\">{ state.reducer[id].title }</h1>\r\n          <h2 className=\"detail-description\">{ state.reducer[id].content }</h2>\r\n          <h3 className=\"detail-description\">가격: { priceState }원</h3>\r\n          <hr />\r\n          <div className=\"quanButtonContainer\">\r\n            <button className=\"numberUp quanBtn\" onClick={() => { orederQuanEvent(\"down\") }}>-</button>\r\n            <input className=\"numberInputBox\" type=\"number\" placeholder={orderQuan} min=\"1\" max=\"10\" />\r\n            <button className=\"numberDown quanBtn\" onClick={() => { orederQuanEvent(\"up\") }}>+</button>\r\n          </div>\r\n          <hr />\r\n        </div>\r\n        <div>\r\n          <button className=\"orderBtn\" onClick={() => {\r\n            order();\r\n            history.push('/cart');\r\n          }}>주문하기</button>\r\n          <button className=\"orderBtn\" onClick={() => {history.goBack()}}>뒤로가기</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Detail;","import { useHistory } from 'react-router-dom';\r\nimport '../styles/jumbotron.scss'\r\n\r\nfunction Jumbotron() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <section className=\"jumbotron-container\">\r\n      <h1>Welcome</h1>\r\n      <button onClick={() => { history.push(\"/cart\") }}>Cart</button>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Product() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <section onClick={() => { history.push(\"/detail\") }}>\r\n      {\r\n        \r\n      }\r\n      {/* 데이터 받아와서 map으로 풀어서 return 한다. flex-wrap은 wrap 으로 해서  지정된 width 넘어가면 다음 칸으로 -> 한 줄에 3개의 상품만 보여지도록 */}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Product;","import { useSelector } from 'react-redux'\r\nimport Product from './Proudct'\r\nimport '../styles/mainProduct.scss'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction MainProduct() {\r\n  const state = useSelector(state => state)\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <section>\r\n      <Product />\r\n      <div className=\"product-container\">\r\n        {\r\n          state.reducer.map((el, i) => {\r\n            return (\r\n              <div className=\"product\" key={i} onClick={() => { history.push(`/detail/${el.id}`) }}>\r\n                <img src={`https://codingapple1.github.io/shop/shoes${el.id + 1}.jpg`} alt=\"product img\"/>\r\n                <h2>{ el.title }</h2>\r\n                <h3>price: { el.price.toLocaleString('ko-KR') }원</h3>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default MainProduct;","/* eslint-disable */\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../base/reset.scss'\r\nimport '../styles/nav.scss'\r\n\r\nfunction Nav() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <nav className=\"nav\">\r\n      <div className=\"logo\" onClick={() => { history.push('/') }}><a>Shopping</a></div>\r\n      <ul className=\"nav-item-container\">\r\n        <li className=\"nav-item\" onClick={() => { history.push(\"/cart\") }}><a>Cart</a></li>\r\n        <li className=\"nav-item\" onClick={() => { history.push(\"/order-list\") }}><a>주문 목록</a></li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav;","/* eslint-disable */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport '../styles/cart.scss'\r\n\r\n\r\nfunction OrderList() {\r\n  // localStorage에서 데이터 받아와야 한다.\r\n  // 데이터가 있으면 주문 목록을 보여주고, 주문한 것이 없다면 \"주문 내역이 없습니다.\"를 표시한다.\r\n\r\n  const [localModal, setLocalModal] = useState(true);  // true이면 주문 내역이 없습니다. 출력, false이면 이 모달은 없앰\r\n  const [localCopy, setLocalCopy] = useState([])\r\n\r\n  // useEffect 부분이 이상해서 localCopy.map 했을 대 localCopy가 배열이 아니라고 나옴\r\n  useEffect(() => {\r\n    let localState = localStorage.getItem(\"orderList\")\r\n    if(localState === null) {\r\n      setLocalModal(true);\r\n    } else {\r\n      setLocalCopy([...JSON.parse(localState)])\r\n      setLocalModal(false)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        localModal\r\n        ? <NoneOrder />\r\n        : <OrderContianer state={localCopy} />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nfunction NoneOrder() {\r\n  return (\r\n    <h1>주문 내역이 없습니다.</h1>\r\n  )\r\n}\r\n\r\nfunction OrderContianer(props) {\r\n  return (\r\n    <div className=\"cart-container\">\r\n      <h1>주문 내역</h1>\r\n      <ul className=\"cart-list-container\">\r\n        <li className=\"cart-list\">#</li>\r\n        <li className=\"cart-list\">제품명</li>\r\n        <li className=\"cart-list\">가격</li>\r\n        <li className=\"cart-list\">수량</li>\r\n        <li className=\"cart-list\">구매일</li>\r\n      </ul>\r\n      {\r\n        props.state.map((el, i) => {\r\n          return (\r\n            <ul key={i} className=\"cart-list-container\">\r\n              <li className=\"cart-list\">{i + 1}</li>\r\n              <li className=\"cart-list\">{ el.title }</li>\r\n              <li className=\"cart-list\">{ el.price.toLocaleString('ko-KR') }</li>\r\n              <li className=\"cart-list\">{ el.quan }</li>\r\n              <li className=\"cart-list\">{ el.date }</li>\r\n            </ul>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OrderList;","/* eslint-disable */\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport './App.scss';\nimport Cart from './components/Cart';\nimport Detail from './components/Detail';\nimport Jumbotron from './components/Jumbotron';\nimport MainProduct from './components/MainProduct';\nimport Nav from './components/Nav';\nimport OrderList from './components/OrderList'\n\nfunction App() {\n  const [getCount, setGetCount] = useState(0);\n\n  const state = useSelector((state) => state)\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  function dataCall() {\n    if(getCount <= 1) {\n      axios.get('https://codingapple1.github.io/shop/data2.json')\n      .then((result) => {\n        dispatch({type: \"addData\", payload: result.data})\n      })\n      .catch((error) => {console.log(error)})\n    }\n  }\n\n  useEffect(() => {\n    if(localStorage.getItem(\"visited\") === null) {\n      localStorage.setItem(\"visited\", JSON.stringify([]))\n    } else {\n      return null;\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Switch>\n        <Route path=\"/\" exact>\n          <Jumbotron />\n          <MainProduct />\n          {\n            getCount <= 0\n            ? <button className=\"addButton\" onClick={() => { dataCall(); setGetCount(getCount + 1) }}>더보기</button>\n            : null\n          }\n          \n          {/* 최근 본 상품 만들었는데 더보기 데이터가 최근 본 상품 박스에 있으면 클릭했을 때 에러난다. 이거 고치기 전까지 사용 x */}\n          {/* <aside className=\"visited\">\n            최근 본 상품\n            {\n              JSON.parse(localStorage.getItem(\"visited\")).map((el, i) => {\n                return (\n                  <div>\n                    {\n                      i < 3\n                      ? <img onClick={() => { history.push(`/detail/${Number(el)}`) }} src={`https://codingapple1.github.io/shop/shoes${Number(el) + 1}.jpg`} />\n                      : null\n                    }\n                  </div>\n                )\n              })\n            }\n          </aside> */}\n        </Route>\n\n        <Route path=\"/detail/:id\">\n          <Detail />\n        </Route>\n\n        <Route path=\"/cart\">\n          <Cart />\n        </Route>\n\n        <Route path=\"/order-list\">\n          <OrderList />\n        </Route>\n\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const Data = [\r\n  {\r\n    id : 0,\r\n    title : \"White and Black\",\r\n    content : \"Born in France\",\r\n    price : 120000\r\n  },\r\n\r\n  {\r\n    id : 1,\r\n    title : \"Red Knit\",\r\n    content : \"Born in Seoul\",\r\n    price : 110000\r\n  },\r\n\r\n  {\r\n    id : 2,\r\n    title : \"Grey Yordan\",\r\n    content : \"Born in the States\",\r\n    price : 130000\r\n  }\r\n] \r\n\r\nexport default Data;","import Data from \"./Data\";\r\n\r\nconst initialData = [...Data]\r\n\r\nfunction reducer(state = initialData, action) {\r\n\r\n  if (action.type === \"addData\") {\r\n    let copy = [...state];\r\n    copy.push(...action.payload)\r\n    return copy\r\n  } else {\r\n    return state;\r\n  }\r\n\r\n}\r\n\r\nconst cartData = []\r\n\r\nfunction cartReducer(state = cartData, action) {\r\n\r\n  // Detail 컴포넌트에서 주문하기 버튼 누르면 payload로 누른 페이지에 해당하는 제품의 id, title, quan이 객체의 형태로 넘어오게 한다.\r\n  // 여기서 그 데이터를 받아서 findIndex로 id를 찾은 후 이게 undefined라면 배열에 push, 만약 있다면 수량을 1증가하게 -> .quan++\r\n  if (action.type === \"order\") {\r\n    let idFound = state.findIndex((state) => {return state.id === action.payload.id} )\r\n    if(idFound >= 0) {\r\n      let copy = [...state];\r\n      // 주문하기를 또 누르면 주문한 수량 만큼 올라가고, 가격도 그에 맞게 추가되는 형식으로 만들어야 한다.\r\n      let orderQuan = action.payload.quan;\r\n      let orderPrice = action.payload.price;\r\n\r\n      copy[idFound].quan = Number(copy[idFound].quan) + Number(orderQuan)\r\n      copy[idFound].price = Number(copy[idFound].price) + Number(orderPrice)\r\n      // copy[idFound].price + (quan * )\r\n      return copy;\r\n    } else {\r\n      let copy = [...state];\r\n      copy.push(action.payload)\r\n      return copy\r\n    }\r\n  } else if(action.type === \"quanUp\") {\r\n    let idFound = state.findIndex((state) => state.id === action.payload )\r\n    if(state[idFound].quan < 10) {\r\n      let copy = [...state];\r\n      console.log(\"idFound: \", idFound)\r\n      copy[idFound].quan++\r\n      return copy;\r\n    } else {\r\n      return state;\r\n    }\r\n\r\n  } else if(action.type === \"quanDown\") {\r\n    let idFound = state.findIndex((state) => state.id === action.payload )\r\n    if(state[idFound].quan > 1) {\r\n      let copy = [...state];\r\n      copy[idFound].quan--\r\n      return copy;\r\n    } else {\r\n      return state;\r\n    }\r\n  } else if(action.type === \"removeItem\") {\r\n    let idFound = state.findIndex((state) => state.id === action.payload );\r\n    let copy = [...state];\r\n    copy.splice(idFound, 1);\r\n    return copy;\r\n  } else if(action.type === \"paymentSuccess\") {\r\n    let copy = [];\r\n    return copy;\r\n  } else {\r\n    return state;\r\n  }\r\n\r\n}\r\n\r\nexport {cartReducer, reducer};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { combineReducers, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport {cartReducer, reducer} from './reducer';\n\n\nconst store = createStore(combineReducers({reducer, cartReducer}))\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}